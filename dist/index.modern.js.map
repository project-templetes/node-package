{"version":3,"file":"index.modern.js","sources":["../src/index.js"],"sourcesContent":["#!/usr/bin/env node\n\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport inquirer from \"inquirer\";\nimport { Command } from \"commander\";\n\nconst Error = \"\\x1b[31m%s\\x1b[0m\"; // ANSI escape code for red text\nconst Green = \"\\x1b[32m%s\\x1b[0m\"; // ANSI escape code for green text\nconst Blue = \"\\x1b[34m%s\\x1b[0m\"; // ANSI escape code for blue text\nconst Reset = \"\\x1b[0m\"; // ANSI escape code to reset color\n\nasync function askQuestion(cwd){\n  const dir = await handleDirPrompt(cwd, cwd);\n  const [baseDir, statesDir] = await handleDirNamePrompt(dir);\n  const framework = await handleFrameworkPrompt();\n  const typescript = await handleTypescriptPrompt();\n  console.log('\\x1b[32m->\\x1b[0m \\x1b[34m', baseDir, Reset);\n  console.log('\\x1b[32m->\\x1b[0m \\x1b[34m', framework, typescript ? 'TS' : 'JS', Reset);\n  return {\n    baseDir,\n    statesDir,\n    framework,\n    typescript,\n  }\n}\n\nasync function handleDirPrompt(cwd, dir) {\n  const ans = await inquirer.prompt([\n    {\n      type: \"input\",\n      name: \"baseDir\",\n      message: \"Where do you want to create the redux-provider?\",\n      default: dir.split(path.sep).pop(),\n    },\n  ]);\n\n  // if ans.dir is equal to detault value, then it means the user wants to create the redux-provider in the current directory. So we return the current directory\n\n  if (ans.baseDir !== dir.split(path.sep).pop()) {\n    if (path.isAbsolute(ans.baseDir)) { // Check if the provided path is absolute\n      dir = ans.baseDir;\n    } else {\n      dir = path.join(dir, ans.baseDir);\n    }\n  } \n\n  const exists = fs.existsSync(dir);\n  if (!exists) {\n    console.log(Error, `Directory ${dir} does not exist`);\n    dir = path.join(dir, \"..\");\n    console.log(Green, dir);\n    const dirs = fs.readdirSync(dir).filter((file) => (!file.startsWith(\".\") && fs.statSync(path.join(dir, file)).isDirectory()));\n    console.log(\"Available folders in the directory: \");\n    dirs.forEach((dir) => {\n      console.log(Blue, dir);\n    });\n    return handleDirPrompt(cwd, dir);\n  }\n\n  const confirm = await inquirer.prompt([\n    {\n      type: \"confirm\",\n      name: \"confirm\",\n      message: `Is this the correct directory? ${dir}`,\n      default: true,\n    },\n  ]);\n\n  if (!confirm.confirm) {\n    console.log(Green, dir);\n    const dirs = fs.readdirSync(dir).filter((file) => (!file.startsWith(\".\") && fs.statSync(path.join(dir, file)).isDirectory()));\n    console.log(\"Available folders in the directory: \");\n    dirs.forEach((dir) => {\n      console.log(Blue, dir);\n    });\n    return handleDirPrompt(cwd, dir);\n  }\n  return dir;\n}\n\nasync function handleDirNamePrompt(dir) {\n  const ans = await inquirer.prompt([\n    {\n      type: \"input\",\n      name: \"dir\",\n      message: \"Enter the name of the directory\",\n      default: \"redux-provider\",\n    },\n  ]);\n\n  const exists = fs.existsSync(path.join(dir, ans.dir));\n  if (exists) {\n    console.log(Error, `Directory ${dir} already exists`);\n    return handleDirNamePrompt(dir);\n  }\n\n  return [\n    path.join(dir, ans.dir),\n    path.join(dir, ans.dir, \"states\"),\n  ]\n}\n\nasync function handleFrameworkPrompt() {\n  const ans = await inquirer.prompt([\n    {\n      type: \"list\",\n      name: \"framework\",\n      message: \"What type of project you are using?\",\n      choices: [\"Next\", \"React\"],\n    },\n  ]);\n\n  return ans.framework;\n}\n\nasync function handleTypescriptPrompt() {\n  const ans = await inquirer.prompt([\n    {\n      type: \"confirm\",\n      name: \"typescript\",\n      message: \"Are you using TypeScript?\",\n    },\n  ]);\n\n  return ans.typescript;\n}\n\nfunction create(config) {\n  const baseDir = config.baseDir;\n  const statesDir = config.statesDir;\n  const isNext = \"next\" === `${config.framework}`.toLowerCase();\n  const isTypescript = config.typescript;\n\n  // Create directories\n  fs.mkdirSync(statesDir, { recursive: true });\n\n  // Create and write to auth.[ts|js]\n  const authContent = `${isNext ? \"'use client';\" : \"\"}\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { useLocalStorage } from \"../use-local-storage\";\n\nconst {\n    readLocalStorage, \n    updateLocalStorage\n} = useLocalStorage('auth', {\n    isAuth: false,\n    token: \"\",\n  });\n  \nconst auth = createSlice({\n    name: \"auth\",\n    initialState: readLocalStorage(),\n    reducers: {\n        logout: () => updateLocalStorage(null),\n        login: (state, action) =>  updateLocalStorage({\n            isAuth: true,\n            ...(action.payload)\n        })\n\n    }\n})\n\nexport default auth;\n`;\n  fs.writeFileSync(path.join(statesDir, isTypescript ? 'auth.ts' : 'auth.js'), authContent);\n\n  // Create and write to index.[tsx|jsx]\n  const indexContent = `${isNext ? \"'use client';\" : \"\"}\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport auth from \"./states/auth\";\nimport React, { useEffect } from \"react\";\nconst store = configureStore({\n  reducer: {\n    auth: auth.reducer,\n  },\n});\nexport const authActions = auth.actions;\nexport default function ReduxProvider({ children }${isTypescript ? \": { children: React.ReactNode }\" : \"\"}) {\n  useEffect(() => {}, []);\n  return <Provider store={store}>{children}</Provider>;\n};\n`;\n  fs.writeFileSync(path.join(baseDir, isTypescript ? 'index.tsx' : 'index.jsx'), indexContent);\n\n  // Create and write to use-local-storage.[ts|js]\n  const useLocalStorageContent = `export const useLocalStorage = (key${isTypescript ? \": string\" : \"\"}, defaultState${isTypescript ? \": any\" : \"\"}) => {\n  return {\n      updateLocalStorage: (data${isTypescript ? \": any\" : \"\"} = null) => {\n          if (!data) return localStorage.removeItem(key);\n          localStorage.setItem(key, JSON.stringify(data));\n      },\n      readLocalStorage: () => {\n          if (typeof window !== 'undefined') {\n            const data = localStorage.getItem(key);\n            return !!data && data !== \"undefined\"\n              ? JSON.parse(data) \n              : defaultState;\n          } \n          return defaultState;\n        },\n        \n  }\n}\n`;\n  fs.writeFileSync(\n    path.join(baseDir, isTypescript ? 'use-local-storage.ts' : 'use-local-storage.js'),\n    useLocalStorageContent\n  );\n\n  console.log(\"Redux provider structure created successfully.\");\n}\n\nconst program = new Command();\n\nprogram.parse(process.argv);\n\nif (program.args.length === 0) {\n    const cwd = process.cwd();\n    askQuestion(cwd)\n    .then(async (ans) => {\n        create(ans);\n    })\n    .catch(err => {\n        if (err.name === 'ExitPromptError') {\n            console.log(Error, 'Prompt was force closed by the user.');\n        } else {\n            console.error(err);\n        }\n    });\n}"],"names":["Error","Green","Blue","Reset","async","handleDirPrompt","cwd","dir","ans","inquirer","prompt","type","name","message","default","split","path","sep","pop","baseDir","isAbsolute","join","fs","existsSync","console","log","dirs","readdirSync","filter","file","startsWith","statSync","isDirectory","forEach","confirm","handleDirNamePrompt","program","Command","parse","process","argv","args","length","statesDir","framework","choices","handleFrameworkPrompt","typescript","handleTypescriptPrompt","askQuestion","then","config","isNext","toLowerCase","isTypescript","mkdirSync","recursive","authContent","writeFileSync","indexContent","useLocalStorageContent","create","catch","err","error"],"mappings":"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"}