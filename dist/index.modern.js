#!/usr/bin/env node
import*as e from"fs";import*as t from"path";import r from"inquirer";import{Command as o}from"commander";const n="[31m%s[0m",a="[32m%s[0m",s="[34m%s[0m",i="[0m";async function c(o,i){const l=await r.prompt([{type:"input",name:"baseDir",message:"Where do you want to create the redux-provider?",default:i.split(t.sep).pop()}]);if(l.baseDir!==i.split(t.sep).pop()&&(i=t.isAbsolute(l.baseDir)?l.baseDir:t.join(i,l.baseDir)),!e.existsSync(i)){console.log(n,`Directory ${i} does not exist`),i=t.join(i,".."),console.log(a,i);const r=e.readdirSync(i).filter(r=>!r.startsWith(".")&&e.statSync(t.join(i,r)).isDirectory());return console.log("Available folders in the directory: "),r.forEach(e=>{console.log(s,e)}),c(o,i)}if(!(await r.prompt([{type:"confirm",name:"confirm",message:`Is this the correct directory? ${i}`,default:!0}])).confirm){console.log(a,i);const r=e.readdirSync(i).filter(r=>!r.startsWith(".")&&e.statSync(t.join(i,r)).isDirectory());return console.log("Available folders in the directory: "),r.forEach(e=>{console.log(s,e)}),c(o,i)}return i}async function l(o){const a=await r.prompt([{type:"input",name:"dir",message:"Enter the name of the directory",default:"redux-provider"}]);return e.existsSync(t.join(o,a.dir))?(console.log(n,`Directory ${o} already exists`),l(o)):[t.join(o,a.dir),t.join(o,a.dir,"states")]}const u=new o;u.parse(process.argv),0===u.args.length&&async function(e){const t=await c(e,e),[o,n]=await l(t),a=await async function(){return(await r.prompt([{type:"list",name:"framework",message:"What type of project you are using?",choices:["Next","React"]}])).framework}(),s=await async function(){return(await r.prompt([{type:"confirm",name:"typescript",message:"Are you using TypeScript?"}])).typescript}();return console.log("[32m->[0m [34m",o,i),console.log("[32m->[0m [34m",a,s?"TS":"JS",i),{baseDir:o,statesDir:n,framework:a,typescript:s}}(process.cwd()).then(async r=>{!function(r){const o=r.baseDir,n=r.statesDir,a="next"===`${r.framework}`.toLowerCase(),s=r.typescript;e.mkdirSync(n,{recursive:!0});const i=(a?"'use client';":"")+'\nimport { createSlice } from "@reduxjs/toolkit";\nimport { useLocalStorage } from "../use-local-storage";\n\nconst {\n    readLocalStorage, \n    updateLocalStorage\n} = useLocalStorage(\'auth\', {\n    isAuth: false,\n    token: "",\n  });\n  \nconst auth = createSlice({\n    name: "auth",\n    initialState: readLocalStorage(),\n    reducers: {\n        logout: () => updateLocalStorage(null),\n        login: (state, action) =>  updateLocalStorage({\n            isAuth: true,\n            ...(action.payload)\n        })\n\n    }\n})\n\nexport default auth;\n';e.writeFileSync(t.join(n,s?"auth.ts":"auth.js"),i);const c=`${a?"'use client';":""}\nimport { Provider } from "react-redux";\nimport { configureStore } from "@reduxjs/toolkit";\nimport auth from "./states/auth";\nimport React, { useEffect } from "react";\nconst store = configureStore({\n  reducer: {\n    auth: auth.reducer,\n  },\n});\nexport const authActions = auth.actions;\nexport default function ReduxProvider({ children }${s?": { children: React.ReactNode }":""}) {\n  useEffect(() => {}, []);\n  return <Provider store={store}>{children}</Provider>;\n};\n`;e.writeFileSync(t.join(o,s?"index.tsx":"index.jsx"),c);const l=`export const useLocalStorage = (key${s?": string":""}, defaultState${s?": any":""}) => {\n  return {\n      updateLocalStorage: (data${s?": any":""} = null) => {\n          if (!data) return localStorage.removeItem(key);\n          localStorage.setItem(key, JSON.stringify(data));\n      },\n      readLocalStorage: () => {\n          if (typeof window !== 'undefined') {\n            const data = localStorage.getItem(key);\n            return !!data && data !== "undefined"\n              ? JSON.parse(data) \n              : defaultState;\n          } \n          return defaultState;\n        },\n        \n  }\n}\n`;e.writeFileSync(t.join(o,s?"use-local-storage.ts":"use-local-storage.js"),l),console.log("Redux provider structure created successfully.")}(r)}).catch(e=>{"ExitPromptError"===e.name?console.log(n,"Prompt was force closed by the user."):console.error(e)});
//# sourceMappingURL=index.modern.js.map
